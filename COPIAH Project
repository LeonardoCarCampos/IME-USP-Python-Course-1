import re
import math

def le_assinatura():
    '''A funcao le os valores dos tracos linguisticos do modelo e devolve uma assinatura a ser comparada com os textos fornecidos'''
    print("Bem-vindo ao detector automático de COH-PIAH.")
    print("Informe a assinatura típica de um aluno infectado:")

    wal = float(input("Entre o tamanho médio de palavra:"))
    ttr = float(input("Entre a relação Type-Token:"))
    hlr = float(input("Entre a Razão Hapax Legomana:"))
    sal = float(input("Entre o tamanho médio de sentença:"))
    sac = float(input("Entre a complexidade média da sentença:"))
    pal = float(input("Entre o tamanho medio de frase:"))

    return [wal, ttr, hlr, sal, sac, pal]

def le_textos():
    '''A funcao le todos os textos a serem comparados e devolve uma lista contendo cada texto como um elemento'''
    i = 1
    textos = []
    texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")
    while texto:
        textos.append(texto)
        i += 1
        texto = input("Digite o texto " + str(i) +" (aperte enter para sair):")

    return textos

def separa_sentencas(texto):
    '''A funcao recebe um texto e devolve uma lista das sentencas dentro do texto'''
    sentencas = re.split(r'[.!?]+', texto)
    if sentencas[-1] == '':
        del sentencas[-1]
    return sentencas

def separa_frases(sentenca):
    '''A funcao recebe uma sentenca e devolve uma lista das frases dentro da sentenca'''
    return re.split(r'[,:;]+', sentenca)

def separa_palavras(frase):
    '''A funcao recebe uma frase e devolve uma lista das palavras dentro da frase'''
    return frase.split()

def n_palavras_unicas(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras que aparecem uma unica vez'''
    freq = dict()
    unicas = 0
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            if freq[p] == 1:
                unicas -= 1
            freq[p] += 1
        else:
            freq[p] = 1
            unicas += 1

    return unicas

def n_palavras_diferentes(lista_palavras):
    '''Essa funcao recebe uma lista de palavras e devolve o numero de palavras diferentes utilizadas'''
    freq = dict()
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            freq[p] += 1
        else:
            freq[p] = 1

    return len(freq)


def calcula_assinatura(texto):
    ''' 1 - IMPLEMENTAR. Essa funcao recebe um texto e deve devolver a assinatura do texto.'''

    wal = tamanho_medio_palavra(texto)
    ttr = Type_Token(texto)
    hlr = razao_hapax(texto)
    sal = tamanho_medio_sentenca(texto)
    sac = complexidade_sentenca(texto)
    pal = tamanho_medio_frase(texto)

    return [wal, ttr, hlr, sal, sac, pal]


def compara_assinatura(as_a, as_b):
    ''' 2 - IMPLEMENTAR. Essa funcao recebe duas assinaturas de texto e deve devolver o grau de similaridade nas assinaturas.'''
    diferenca_total = sum(abs(as_a[i] - as_b[i]) for i in range(len(as_a)))
    
    # Divide a soma das diferenças pelo número de traços (6)
    grau_similaridade = diferenca_total / 6
    
    return grau_similaridade
 

def avalia_textos(textos, ass_cp):
    ''' 3 - IMPLEMENTAR. Essa funcao recebe uma lista de textos e uma assinatura ass_cp e deve devolver o numero (1 a n) do texto com maior probabilidade de ter sido infectado por COH-PIAH.'''
    assinaturas = [calcula_assinatura(texto) for texto in textos]
    diferencas = [compara_assinatura(assinatura, ass_cp) for assinatura in assinaturas]

    indice_menor_diferenca = diferencas.index(min(diferencas)) + 1  # +1 porque os índices começam em 1

    return indice_menor_diferenca


'fazer função Tamanho_medio_palavra'
def tamanho_medio_palavra(frase):
    # Divide a frase em palavras usando espaço como delimitador
    palavras = frase.split()
    
    # Se não houver palavras, a média é 0 para evitar divisão por zero
    if not palavras:
        return 0
    
    # Calcula o total de caracteres e o número total de palavras
    total_caracteres = sum(len(palavra) for palavra in palavras)
    numero_palavras = len(palavras)
    
    #Calcula a média de caracteres por palavra
    media_caracteres = total_caracteres / numero_palavras
    return round(media_caracteres, 2)
    
    
'fazer função Relação Type-Token'
def Type_Token(frase):
    # Divide a frase em palavras usando espaço como delimitador
    palavras = frase.split()
    
    # Cria um conjunto para armazenar palavras únicas
    palavras_unicas = set(palavras)
    
    # Se n]ao houver palavras únicas, a média é 0 para evitar divisão por zero
    if not palavras_unicas:
        return 0
    
    # Calcula o total de caracteres e o número total de palavras únicas
    total_caracteres = sum(len(palavra) for palavra in palavras_unicas)
    numero_palavras_unicas = len(palavras_unicas)
    
    # Calcula a relação type-token
    type_token = numero_palavras_unicas / total_caracteres
    
    return round(type_token, 2)
    
    
'fazer função Razão Hapax'
def razao_hapax(frase):
    # Divide a frase em palavras usando espaço como delimitador
    palavras = frase.split()
    
    # Cria um dicionário para armazenar a frequência de cada palavra
    frequencia_palavras = {}
    for palavra in palavras:
        frequencia_palavras[palavra] = frequencia_palavras.get(palavra, 0) + 1
    # Filtra palavras que aparecem apenas uma vez
    palavras_unicas = [palavra for palavra, frequencia in frequencia_palavras.items() if frequencia ==1]
    
    # Calcula a razão de palavra única sobre o total de palavras
    razao_hapax = len(palavras_unicas) / len(palavras)
    
    return round(razao_hapax, 2)

'fazer função tamanho médio da sentença'
def tamanho_medio_sentenca(frase):
    # Divide a frase em sentenças usando pontuações como delimitadores
    sentencas = [sentenca.strip() for sentenca in re.split(r'[.!?]', frase) if sentenca.strip()]

    # Calcula o total de caracteres em todas as sentenças e o número de sentenças
    total_caracteres_sentencas = sum(len(sentenca) for sentenca in sentencas)
    numero_sentencas = len(sentencas)

    # Calcula o tamanho médio de sentença
    if numero_sentencas > 0:
        tamanho_medio = total_caracteres_sentencas / numero_sentencas
        return round(tamanho_medio, 2)
    else:
        return 0


'fazer função complexidade da sentença'
def complexidade_sentenca(frase):
    # Divide a frase em sentenças usando pontuações como delimitadores
    sentencas = [sentenca.strip() for sentenca in re.split(r'[.!?]', frase) if sentenca.strip()]

    # Calcula o número total de frases e o número de sentenças
    numero_total_frases = sum(sentenca.count('.') + sentenca.count(',') + sentenca.count(':') + sentenca.count('!') + sentenca.count('?') for sentenca in sentencas)
    numero_sentencas = len(sentencas)

    # Calcula a complexidade da sentença
    if numero_sentencas > 0:
        complexidade = numero_total_frases / numero_sentencas
        return round(complexidade, 2)
    else:
        return 0

def tamanho_medio_frase(frase):
    # Divide a frase em sentenças usando pontuações como delimitadores
    sentencas = [sentenca.strip() for sentenca in re.split(r'[.!?,:]', frase) if sentenca.strip()]

    # Calcula o número total de caracteres em todas as sentenças e o número total de frases
    total_caracteres_sentencas = sum(len(sentenca) for sentenca in sentencas)
    numero_total_frases = len(sentencas)

    # Calcula o tamanho médio de frase
    if numero_total_frases > 0:
        tamanho_medio = total_caracteres_sentencas / numero_total_frases
        return round(tamanho_medio, 2)
    else:
        return 0


def calcular_diferenca(tracos_a, tracos_b):
    soma_diferencas = sum(abs(traco_a - traco_b) for traco_a, traco_b in zip(tracos_a, tracos_b))
    return soma_diferencas

if __name__ == "__main__":
    assinatura = le_assinatura()
    textos = le_textos()
    resultado = avalia_textos(textos, assinatura)
    print(f"O texto com maior probabilidade de ser COH-PIAH é o texto {resultado}.")
